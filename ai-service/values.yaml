replicaCount: 1

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  env:
    - name: DEPLOYMENT_GROUP_NAME
      value: "enterprise-env"
    - name: AI_SERVICE_ANDROMEDA_HOST
      # The andromeda-service prefix corresponds to andromeda.serviceName: andromeda-service in code-analysis/values.yaml
      # Adjust the andromeda host URL to match your deployment configuration if necessary.
      value: http://andromeda-service.__ANDRO_NAMESPACE__.svc.__ANDRO_CLUSTER_DOMAIN__:6001
    - name: CHROMA_HOST
      value: ai-service-chroma-chromadb.__AI_NAMESPACE__.svc.__AI_CLUSTER_DOMAIN__
    - name: NVIDIA_DRIVER_CAPABILITIES
      value: "all"
    - name: HF_ACCESS_TOKEN
      value: "HF_ACCESS_TOKEN_PLACEHOLDER"  # NEEDS-CUSTOMER-INPUT
  labels: { } # Add custom labels here
  annotations: { } # Add custom annotations here

image:
  repository: 638117407428.dkr.ecr.eu-west-1.amazonaws.com/ai-service-on-premise
  tag: latest
  pullPolicy: Always
  imagePullSecret: ai-service-ecr-secret

privadoAwsSecrets:
  useECR: true  # NEEDS-CUSTOMER-INPUT
  secretName: ai-service-ecr-secret
  secretAccessKeyId: __AWS_ACCESS_KEY_ID__  # NEEDS-CUSTOMER-INPUT
  secretAccessKey: __AWS_SECRET_ACCESS_KEY__  # NEEDS-CUSTOMER-INPUT
  annotations: { }  # Add custom labels here

serviceAccount:
  name: ai-service-account
  create: true
  automount: true
  annotations: { }  # Add custom labels here
  labels: { }  # Add custom annotations here

resources:
  limits:
    nvidia.com/gpu: 1
  requests:
    cpu: "2000m"
    memory: "4Gi"
    nvidia.com/gpu: 1

nodeSelector:
  node.kubernetes.io/instance-type: g5.xlarge  # NEEDS-CUSTOMER-INPUT

# values related to auto-updating the deployment when the ai-service image is updated
autoupdates:
  autoUpdateEnabled: false  # NEEDS-CUSTOMER-INPUT
  podAppLabel: ai-service
  deploymentName: ai-service
  annotationName: "checksum/image-sha256"
  serviceAccountName: ai-service-updater-account
  awsRegion: "eu-west-1"
  roleName: ai-service-updater-role
  roleBindingName: ai-service-updater-rb
  cronName: ai-service-updater
  cronSchedule: "*/10 * * * *"
  cronPodRestartPolicy: OnFailure
  cronjobLabels:  # key: value
  cronjobAnnotations: # key: value
  image:
    name: public.ecr.aws/privado/awscli-kubectl
    tag: latest
    imagePullPolicy: Always

livenessProbe:
  httpGet:
    path: /ht/
    port: http
  initialDelaySeconds: 300
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  httpGet:
    path: /ht/
    port: http
  initialDelaySeconds: 60

ingress:
  enabled: false
  name: ai-service-ingress

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

volumes:
  - name: ai-service-models-volume
    persistentVolumeClaim:
      claimName: ai-service-models-pvc
  - name: ai-service-log-volume
    persistentVolumeClaim:
      claimName: ai-service-log-pvc

volumeMounts:
  - name: ai-service-log-volume
    mountPath: "/var/log/uwsgi"
    readOnly: false
  - name: ai-service-models-volume
    mountPath: "/var/models"
    readOnly: false

persistentVolumeClaim:
  aiServiceModelsPvc:
    name: ai-service-models-pvc
    accessModes: "ReadWriteMany" # Update ReadWriteMany if autoscaling is enabled
    resources:
      requests:
        storage: 80Gi
    storageClassName: efs-sc # NEEDS-CUSTOMER-INPUT.
  aiServiceLogPvc:
    name: ai-service-log-pvc
    accessModes: "ReadWriteMany"
    resources:
      requests:
        storage: 10Gi
    storageClassName: efs-sc # NEEDS-CUSTOMER-INPUT

podAnnotations: { } # Add custom labels here
podLabels: { } # Add custom labels here

nameOverride: ""
fullnameOverride: ""
podSecurityContext: { }
imagePullSecrets: [ ]
securityContext: { }
